.\" Man page generated from reStructuredText.
.
.TH "PARAVER-TOOLSET" "1" "Jun 11, 2018" "0.99" "paraver toolset"
.SH NAME
paraver-toolset \- Paraver Toolset
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SS Contents
.INDENT 0.0
.IP \(bu 2
\fI\%Paraver Toolset\fP
.INDENT 2.0
.IP \(bu 2
\fI\%Overview\fP
.IP \(bu 2
\fI\%paramedir\fP
.INDENT 2.0
.IP \(bu 2
\fI\%Usage\fP
.IP \(bu 2
\fI\%Options (General)\fP
.IP \(bu 2
\fI\%Options (compute histogram)\fP
.IP \(bu 2
\fI\%Options (other tools)\fP
.IP \(bu 2
\fI\%Parameters\fP
.IP \(bu 2
\fI\%Examples\fP
.IP \(bu 2
\fI\%Drawbacks\fP
.UNINDENT
.IP \(bu 2
\fI\%prvmerger\fP
.INDENT 2.0
.IP \(bu 2
\fI\%Usage\fP
.IP \(bu 2
\fI\%Options\fP
.IP \(bu 2
\fI\%Parameters\fP
.IP \(bu 2
\fI\%Drawbacks\fP
.UNINDENT
.IP \(bu 2
\fI\%sort\-trace.sh / is\-trace\-sorted.sh\fP
.INDENT 2.0
.IP \(bu 2
\fI\%Usage\fP
.IP \(bu 2
\fI\%Parameters\fP
.IP \(bu 2
\fI\%Drawbacks\fP
.UNINDENT
.IP \(bu 2
\fI\%stats\fP
.INDENT 2.0
.IP \(bu 2
\fI\%Usage\fP
.IP \(bu 2
\fI\%Parameters\fP
.IP \(bu 2
\fI\%Options\fP
.IP \(bu 2
\fI\%Examples\fP
.IP \(bu 2
\fI\%Drawbacks\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SH OVERVIEW
.sp
\fIwxparaver\fP package comes with a small set of utilities to transform the trace files, to compute timelines or histograms or to get various statistics. These utilities, both scripts and binaries, are installed under the \fB$PARAVER_HOME/bin\fP directory.
.sp
The main utilities are:
.INDENT 0.0
.IP \(bu 2
\fI\%paramedir\fP : integrates many functionalities, like to compute data from a \fIconfiguration.cfg\fP or to transform traces in various ways.
.IP \(bu 2
\fI\%prvmerger\fP : merges two traces under some conditions.
.IP \(bu 2
\fI\%sort\fP : detect unsorted traces, and sort them.
.IP \(bu 2
\fI\%stats\fP : gather useful trace statistics.
.UNINDENT
.sp
Some of these utilities are integrated into \fIwxparaver\fP like the \fIparamedir\fP cut/filter options are in \fICut/Filter\fP window or like \fIstats\fP is in the \fIRun Application\fP window. Also, some scripts are intended to interconnect \fIwxparaver\fP with other BSC performance tools like \fIDimemas\fP simulator.
.SH PARAMEDIR
.sp
\fIparamedir\fP packs two sets of features, some that process the trace to \fBcompute some data\fP and some that \fBtransform\fP the trace, usually to reduce its size.
.sp
The features used to \fBcompute\fP are:
.TS
center;
|l|l|l|l|l|.
_
T{
Feature
T}	T{
Config file
T}	T{
Many?
T}	T{
Output file
T}	T{
Loads Trace?
T}
_
T{
Compute timeline
T}	T{
\&.cfg
T}	T{
Yes
T}	T{
\&.csv
T}	T{
Yes
T}
_
T{
Compute Histogram
T}	T{
\&.cfg
T}	T{
Yes
T}	T{
\&.csv
T}	T{
Yes
T}
_
.TE
.sp
After loading the trace and parsing the .cfg file, \fIparamedir\fP writes exactly the same CSV file that can be got from a \fIwxparaver\fP timeline or histogram after choosing \fISave… –> Text\fP from their popup menus.
.sp
I.e.:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ paramedir linpack.prv useful.cfg \-o my_result.csv
/home/user/my_result.csv file written.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If no output name is explicitly given (\fI\-o\fP parameter), the resulting CSV files are saved in the same directory where the .cfg is placed.
.sp
Also, it is possible to compute many .cfg in the same run:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ paramedir linpack.prv useful.cfg mpi_stats.cfg user_calls.cfg
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The features used to transform the trace are:
.TS
center;
|l|l|l|l|l|.
_
T{
Tool
T}	T{
Files
T}	T{
Loads
trace?
T}
_
T{
Config
T}	T{
Extra
T}	T{
Output
T}
_
T{
Cut
T}	T{
\&.xml
T}	T{
—
T}	T{
\&.prv
T}	T{
no
T}
_
T{
Event\-driven Cut
T}	T{
\&.xml
T}	T{
—
T}	T{
\&.prv
T}	T{
no
T}
_
T{
Event translator
T}	T{
—
T}	T{
\&.prv
T}	T{
\&.prv
T}	T{
no
T}
_
T{
Filter
T}	T{
\&.xml
T}	T{
—
T}	T{
\&.prv
T}	T{
no
T}
_
T{
Software Counters
T}	T{
\&.xml
T}	T{
—
T}	T{
\&.prv
T}	T{
no
T}
_
T{
Time shift
T}	T{
—
T}	T{
shifts
T}	T{
\&.prv
T}	T{
no
T}
_
.TE
.sp
Most of the features that transform the trace need to read their parameters from the XML configuration file that can be saved from \fIwxparaver\fP (through Configuration File in \fICut & Filter\fP Window). There are some example files in \fB$PARAVER_HOME/share/filters\-config\fP directory.
.sp
I.e.:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ paramedir \-f linpack.prv filter\-options.xml
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The resulting trace is written in the same directory where the original trace was.
.sp
An interesting issue is that most of these operations can be combined in an unique command. So it’s possible to pipeline some trace transformations in a sequential run. In this case, the flag order will express the sequence order in which they’re executed.
.sp
I.e.:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ paramedir \-f \-c linpack.prv filter\-options.xml
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In the above example, the trace is filtered and then cut.
.sp
As expected, a .cfg (or many) can be added to a transformation command. Then, the trace fed to the compute phase will be allways the resulting trace of the transformation phase.
.sp
I.e.:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ paramedir \-f \-c linpack.prv filter\-options.xml useful.cfg mpi_stats.cfg
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In the above example, the trace \fIlinpack.filter01.chop01.prv\fP will be used to compute the \fIUseful\fP timeline and the \fIMPI Stats\fP histogram.
.sp
As \fIwxparaver\fP, \fIparamedir\fP can also handle \fBgzipped\fP traces (.prv.gz).
.sp
Finally, note that \fIparamedir\fP have \fBno GUI\fP, so it’s feasible to use it into jobs to be sent to non\-graphical queues.
.SS Usage
.sp
The command syntax is as follows:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
paramedir [\-e] [\-m] [\-p] [\-npr] <trace.prv> [ <config.cfg> | <config.cfg> <ouput\-data\-file> ]+
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Process paraver trace (pipelined as flags are declared, using XML configuration parameters and without trace load):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
paramedir [\-c] [\-f] [\-s] [\-o <output\-file.prv>] <trace.prv> <options.xml>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Process paraver trace (direct parametrization, doesn’t load trace):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
paramedir [\-g <event\-type>] [\-o <output\-file>] <prv>
paramedir [\-t <shift\-times\-file>] [\-o <output\-file>] <trace.prv>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Process paraver trace (pipelined as flags are declared, using XML configuration parameters and without trace load):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
paramedir [\-c] [\-f] [\-s] [\-o <output\-file>] <trace.prv> <options.xml>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Process paraver trace (event_translator):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
paramedir \-et <reference_trace.prv> <source_trace.prv> [ \-o <translated.prv> ]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Compute numeric data from processed trace using histogram or timeline CFG’s (all combined, trace is loaded):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
paramedir [\-e] [\-m] [\-p] [\-c] [\-f] [\-s] [\-o <output\-file>] [\-g <event\-type>] \e
          [\-t <shift\-times\-file>] <trace.prv> [ <options.xml> ] [ <config.cfg> | <config.cfg> <ouput\-data\-file> ]+
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Options (General)
.INDENT 0.0
.IP \(bu 2
.INDENT 2.0
.TP
.B \-h, \-\-help
.UNINDENT
.sp
Prints the Usage information (also printed when it’s executed without parameters)
.IP \(bu 2
.INDENT 2.0
.TP
.B \-v, \-\-version
.UNINDENT
.sp
Prints the program version
.UNINDENT
.SS Options (compute histogram)
.INDENT 0.0
.IP \(bu 2
.INDENT 2.0
.TP
.B \-npr, \-\-no\-preferences\-precision
.UNINDENT
.sp
Do not use the global precision (stated in the \fBwxparaver\fP \fIPreferences\fP window).
.IP \(bu 2
.INDENT 2.0
.TP
.B \-m, \-\-many\-files
.UNINDENT
.sp
Allows to separate an histogram cfg output (default: in a unique file).
.IP \(bu 2
.INDENT 2.0
.TP
.B \-e, \-\-empty\-columns
.UNINDENT
.sp
Hide empty columns of a histogram.
.IP \(bu 2
.INDENT 2.0
.TP
.B \-p, \-\-print\-plane
.UNINDENT
.sp
Only the selected Plane of a 3D histogram is saved (by default saves all planes).
.UNINDENT
.SS Options (other tools)
.INDENT 0.0
.IP \(bu 2
.INDENT 2.0
.TP
.B \-o <trace_output.prv>, \-\-output\-name <trace_output.prv>
.UNINDENT
.sp
Output trace name.
.IP \(bu 2
.INDENT 2.0
.TP
.B \-c, \-\-cutter
.UNINDENT
.sp
Apply Cutter tool.
.IP \(bu 2
.INDENT 2.0
.TP
.B \-et <reference_trace>, \-\-event\-translator <reference_trace>
.UNINDENT
.sp
Merge events using this reference trace for translations when conflicts found.
.IP \(bu 2
.INDENT 2.0
.TP
.B \-f, \-\-filter
.UNINDENT
.sp
Apply Filter tool.
.IP \(bu 2
.INDENT 2.0
.TP
.B \-g <event\-type>, \-\-event\-cutter <event\-type>
.UNINDENT
.sp
Apply Event Driven Cutter using ‘event\-type’ as mark.
.IP \(bu 2
.INDENT 2.0
.TP
.B \-s, \-\-software\-counters
.UNINDENT
.sp
Apply Software counters tool.
.IP \(bu 2
.INDENT 2.0
.TP
.B \-t <shift\-times\-file>, \-\-thread\-shifter <shift\-times\-file>
.UNINDENT
.sp
Apply Trace Shifter per thread (file contains at least as shift times as threads).
.IP \(bu 2
.INDENT 2.0
.TP
.B \-tt <shift\-times\-file>, \-\-task\-shifter <shift\-times\-file>
.UNINDENT
.sp
Apply Trace Shifter per task (file contains at least as shift times as tasks).
.IP \(bu 2
.INDENT 2.0
.TP
.B \-ta <shift\-times\-file>, \-\-app\-shifter <shift\-times\-file>
.UNINDENT
.sp
Apply Trace Shifter per applications (file contains at least as shift times as applications).
.IP \(bu 2
.INDENT 2.0
.TP
.B \-tw <shift\-times\-file>, \-\-workload\-shifter <shift\-times\-file>
.UNINDENT
.sp
Whole trace shift (file contains a unique shift time)
.UNINDENT
.SS Parameters
.INDENT 0.0
.IP \(bu 2
.INDENT 2.0
.TP
.B trace.prv
.UNINDENT
.sp
Paraver trace filename; can be gzipped (extensions allowed: only ‘.prv’ or ‘.prv.gz’ ).
.IP \(bu 2
.INDENT 2.0
.TP
.B options.xml
.UNINDENT
.sp
Options for cutter/filter/software counters.
.IP \(bu 2
.INDENT 2.0
.TP
.B config.cfg
.UNINDENT
.sp
Paraver configuration filename. If present, trace’s loaded.
.IP \(bu 2
.INDENT 2.0
.TP
.B output\-data\-file
.UNINDENT
.sp
Name given file with the computed data (used when some \fIconfig.cfg\fP is present). If this parameter is missing, \fIconfig.cfg\fP name is used, changing ‘.cfg’ extension for ‘.mcr’ ).
.UNINDENT
.SS Examples
.sp
Computes the \fImpi_stats.cfg\fP analysis of compressed trace \fIlinpack.prv\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ paramedir linpack.prv.gz mpi_stats.cfg
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Computes the \fImpi_stats.cfg\fP and \fItotal_MPI_activity.cfg\fP analysis of \fIlinpack.prv\fP, saving first one in \fImy_data.txt\fP file:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ paramedir linpack.prv mpi_stats.cfg my_data.txt total_MPI_activity.cfg
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Reads parameters of the cutter from the xml and applies them to \fIlinpack.prv\fP trace:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ paramedir \-c linpack.prv cutter.xml
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Filters mpi calls of \fIlinpack.prv\fP\&. Doesn’t load it, just writes the file:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ paramedir \-\-filter linpack.prv just_MPI_calls.xml
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Reads parameters of the software counters, cutter and filter from the \fIcut_filter_options.xml\fP file and applies them pipelined in the given order ( 1.\- software counters 2.\- cutter, 3.\- filter) to \fIlinpack.prv\fP trace, and the filtered trace is loaded and used to compute \fImpi_stats.cfg\fP\&. The computed mpi results are saved in \fImy_mpi_values.txt\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ paramedir \-s \-\-cutter \-f linpack.prv cut_filter_options.xml mpi_stats.cfg my_mpi_values.txt
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Executes embeddend shifter utility:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ paramedir \-\-thread\-shifter shifttimes_per_thread.txt linpack.prv \-o mylinpack.shifted.prv
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Drawbacks
.INDENT 0.0
.IP 1. 3
Disk space: transform utilities produce another trace as its result (no deletion of the original trace is done).
.IP 2. 3
Memory usage: compute options let \fIparamedir\fP load the trace in memory as \fIwxparaver\fP does.
.UNINDENT
.SH PRVMERGER
.sp
Merges or concatenates two traces that are in the same time unit and share the same objects and applications structure.
.sp
The header is taken from the first trace.
.SS Usage
.sp
The command syntax is as follows:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
prvmerger < \-[merge|concat] > < trace_in_1.prv > < trace_in_2.prv > < trace_out.prv >
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Options
.INDENT 0.0
.IP \(bu 2
.INDENT 2.0
.TP
.B \-concat
.UNINDENT
.sp
Concatenates the traces without checking if the resulting trace is sorted. It copies the header from the first one.
.IP \(bu 2
.INDENT 2.0
.TP
.B \-merge
.UNINDENT
.sp
Merges the traces, copying the header from the first one and sorting the records.
.UNINDENT
.SS Parameters
.INDENT 0.0
.IP \(bu 2
.INDENT 2.0
.TP
.B trace_in_1.prv, trace_in_2.prv
.UNINDENT
.sp
Traces to be merged.
.IP \(bu 2
.INDENT 2.0
.TP
.B trace_out.prv
.UNINDENT
.sp
Output trace.
.UNINDENT
.SS Drawbacks
.INDENT 0.0
.IP 1. 3
No time unit translation is done.
.IP 2. 3
If the resources or process hierarchy are different, then it may produce a trace semantically incoherent.
.UNINDENT
.SH SORT-TRACE.SH / IS-TRACE-SORTED.SH
.sp
A key aspect for most of the tools is to have the trace properly sorted by time. Since you can manipulate or generate your own traces, these scripts will help you sort them.
.sp
There are two simple scripts: \fBis\-trace\-sorted.sh\fP and \fBsort\-trace.sh\fP\&. First one just complains if your trace is disordered, and the second one sorts it (without deleting the original one, and adding a \fI\&.sorted.prv\fP suffix to the resulting trace).
.sp
\fBis\-trace\-sorted.sh\fP stops immediately after the discovery of the first unsorted record.
.sp
In the case of \fBsort\-trace.sh\fP, \fIstable sort\fP is applied: if two records have the same timestamp then they’ll appear in the sorted trace with the same order they had in the original trace.
.SS Usage
.sp
To just check trace order:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
is\-trace\-sorted.sh <trace_in>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To sort the trace:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sort\-trace.sh <trace_in>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you execute them without parameters, you’ll get a short usage message.
.SS Parameters
.INDENT 0.0
.IP \(bu 2
.INDENT 2.0
.TP
.B trace_in
.UNINDENT
.sp
Paraver tracefile. It can be an uncompressed (\fI\&.prv\fP) or a gzipped trace (\fI\&.prv.gz\fP).
.UNINDENT
.SS Drawbacks
.INDENT 0.0
.IP 1. 3
Disk space: both scripts decompress the trace if needed, and \fBsort\-trace.sh\fP also rewrites the whole trace (no deletion of the original trace is done).
.IP 2. 3
As expected, \fBis\-trace\-sorted.sh\fP will potentially read the whole trace if it’s sorted.
.IP 3. 3
Only gzip compression format is allowed.
.UNINDENT
.SH STATS
.sp
\fBstats\fP is a tool that obtains some basic statistics from the trace. They are:
.INDENT 0.0
.IP \(bu 2
Bursts histogram: only for computational bursts
.IP \(bu 2
Events histogram
.IP \(bu 2
Communications histogram
.IP \(bu 2
Calls/thread histogram
.UNINDENT
.sp
The results are written to a \fI\&.dat\fP data file, and drawn into a \fIgnuplot\fP image.
[image: Example of gnuplot generated with "Burst histogram" option]
[image]
.sp
They’re written in the same directory where the input trace is.  It’s possible to skip this gnuplot image generation.
.SS Usage
.sp
The command syntax is as follows:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
stats \-\-help

stats < trace_input.prv > < options >
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Parameters
.INDENT 0.0
.IP \(bu 2
.INDENT 2.0
.TP
.B trace_input.prv
.UNINDENT
.sp
Should be an uncompressed Paraver tracefile and it has to appear before options.
.UNINDENT
.SS Options
.INDENT 0.0
.IP \(bu 2
.INDENT 2.0
.TP
.B \-\-help
.UNINDENT
.sp
Display help information.
.IP \(bu 2
.INDENT 2.0
.TP
.B \-bursts_histo
.UNINDENT
.sp
Show bursts histogram.
.IP \(bu 2
.INDENT 2.0
.TP
.B \-events_histo[:[type1|type1\-type2],...]
.UNINDENT
.sp
Show events histogram, filtering types or ranges of types if needed. If no events are specified, all of them are counted.
.IP \(bu 2
.INDENT 2.0
.TP
.B \-comms_histo
.UNINDENT
.sp
Show comms histogram.
.IP \(bu 2
.INDENT 2.0
.TP
.B \-thread_calls[:type1[\-type2],...]
.UNINDENT
.sp
Shows stats of the calls made by thread, filtering by type or ranges of types. This info is generated in file <trace_in>.calls.info.
.IP \(bu 2
.INDENT 2.0
.TP
.B \-exclusive_times
.UNINDENT
.sp
Calculate exclusive times of routine calls instead inclusive times (to be used \fBonly\fP with \fI\-thread_calls\fP).
.IP \(bu 2
.INDENT 2.0
.TP
.B \-o < file_name >
.UNINDENT
.sp
Generate stats in file <file_name>.dat and  <file_name>.gnuplot (default are <trace_in>.dat and <trace_in>.gnuplot).
.IP \(bu 2
.INDENT 2.0
.TP
.B \-only_dat_file
.UNINDENT
.sp
Only generates the \fIdat\fP file (to be used \fBonly\fP with \fI\-o\fP flag, so it’s named \fIfile_name.dat\fP).
.UNINDENT
.SS Examples
.sp
For bursts histogram:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ stats trace_input.prv \-bursts_histo

$ stats trace_input.prv \-bursts_histo \-o my_data \-only_dat_file
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For events histogram:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ stats trace_input.prv \-events_histo

$ stats trace_input.prv \-events_histo:50000001,50000002

$ stats trace_input.prv \-events_histo:50000001\-50000003,42000001\-42000100
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For communications histogram:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ stats trace_input.prv \-comms_histo
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Drawbacks
.INDENT 0.0
.IP 1. 3
Too much events will difficult the understanding of the gnuplot image. It’s a good idea to shorten the list of events.
.IP 2. 3
No compressed tracefiles are allowed.
.UNINDENT
.SH AUTHOR
Paraver Team
.SH COPYRIGHT
2016, paraver
.\" Generated by docutils manpage writer.
.
